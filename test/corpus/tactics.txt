========================
Theorem With Tactic Body
========================

theorem foo {m n : Nat} : 2 * m + 2 * n = 2 * (n + m) := by
  rewrite Nat.add_comm
  exact (Nat.left_distrib 2 n m).symm

---

(module
  (declaration
    (theorem
      name: (identifier)
      (binders
        (implicitBinder
          name: (identifier)
          name: (identifier)
          type: (identifier)))
      type:
        (binaryExpression
          (binaryExpression
            (binaryExpression (number) (identifier))
            (binaryExpression (number) (identifier)))
          (binaryExpression
            (number)
            (parenthesized (binaryExpression (identifier) (identifier)))))
      body:
        (tactics
          (rewrite (identifier))
          (term
            (proj
              term:
                (parenthesized
                  (apply
                    name: (identifier)
                    argument: (number)
                    argument: (identifier)
                    argument: (identifier)))
              name: (identifier)))))))

=================
Tactic Expression
=================

variable {m n : Nat}
#check (by
  rewrite Nat.add_comm
  exact (Nat.left_distrib 2 n m).symm : 2 * m + 2 * n = 2 * (n + m))

---

(module
  (variable
    (implicitBinder
      name: (identifier)
      name: (identifier)
      type: (identifier)))
  (interactive
    (parenthesized
      (tactics (rewrite (identifier))
        (term
          (proj
            term:
              (parenthesized
                (apply
                  name: (identifier)
                  argument: (number)
                  argument: (identifier)
                  argument: (identifier)))
            name: (identifier))))
      (typeAscription
        type:
          (binaryExpression
            (binaryExpression
              (binaryExpression (number) (identifier))
              (binaryExpression (number) (identifier)))
            (binaryExpression
              (number)
              (parenthesized
                (binaryExpression (identifier) (identifier)))))))))

====
Simp
====

example : 2 = 2 := by simp

---

(module
  (declaration
    (example (binaryExpression (number) (number))
      (tactics (simp)))))

========================
Simp With Extra Theorems
========================

example : 2 = 2 := by simp [foo, bar]

---

(module
  (declaration
    (example
      type: (binaryExpression (number) (number))
      body:
        (tactics
          (simp
            extra: (list (identifier) (identifier)))))))

=====
Intro
=====

example : ∀ x y : Nat, x + y = x + y := by
  intro x y
  rfl

---

(module
  (declaration
    (example
      (forall
        (binders
          (identifier)
          (identifier)
          (identifier))
        (binaryExpression
          (binaryExpression
            (identifier)
            (identifier))
          (binaryExpression
            (identifier)
            (identifier))))
      (tactics
        (intro
          (identifier)
          (identifier))
        (rfl)))))

=====
Apply
=====

example : true ↔ true := by apply Iff.intro

---

(module
  (declaration
    (example (binaryExpression (true) (true))
      (tactics (applyTactic (identifier))))))

========================
Some Unknown User Tactic
========================

example : true ↔ true := by
  foo
  bar baz
  baz

---

(module
  (declaration
    (example (binaryExpression (true) (true))
      (tactics
        (identifier)
        (apply (identifier) (identifier))
        (identifier)))))

==========
Semicolons
==========

example : (true ↔ true) ↔ (true ↔ true) := by
  apply Iff.intro;
  intro h;
  exact h;
  intro h;
  exact h;

---

(module
  (declaration
    (example
      (binaryExpression
        (parenthesized (binaryExpression (true) (true)))
        (parenthesized (binaryExpression (true) (true))))
      (tactics
        (applyTactic (identifier))
        (intro (identifier))
        (term (identifier))
        (intro (identifier))
        (term (identifier))))))

==============
Synthetic Hole
==============

example {x : Nat} : x = x := by refine Eq.refl ?_

---

(module
  (declaration
    (example
      (binders
        (implicitBinder
          (identifier)
          (identifier)))
      (binaryExpression
        (identifier)
        (identifier))
      (tactics
        (apply
          (identifier)
          (identifier)
          (syntheticHole (hole)))))))
